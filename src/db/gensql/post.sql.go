// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: post.sql

package gensql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (
  author_id, content, updated
) VALUES (
  $1, $2, $3
)
RETURNING id, author_id, content, updated
`

type CreatePostParams struct {
	AuthorID uuid.UUID    `json:"authorID"`
	Content  pgtype.JSONB `json:"content"`
	Updated  time.Time    `json:"updated"`
}

type CreatePostRow struct {
	Id       uuid.UUID    `json:"id"`
	AuthorID uuid.UUID    `json:"authorID"`
	Content  pgtype.JSONB `json:"content"`
	Updated  time.Time    `json:"updated"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRow(ctx, createPost, arg.AuthorID, arg.Content, arg.Updated)
	var i CreatePostRow
	err := row.Scan(
		&i.Id,
		&i.AuthorID,
		&i.Content,
		&i.Updated,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE post
SET is_deleted = true
WHERE author_id = $1 and id = $2
`

type DeletePostParams struct {
	AuthorID uuid.UUID `json:"authorID"`
	Id       uuid.UUID `json:"id"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.AuthorID, arg.Id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, author_id, content, created, updated, is_deleted FROM post
WHERE author_id = $1 and id = $2 and is_deleted = false LIMIT 1
`

type GetPostParams struct {
	AuthorID uuid.UUID `json:"authorID"`
	Id       uuid.UUID `json:"id"`
}

func (q *Queries) GetPost(ctx context.Context, arg GetPostParams) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, arg.AuthorID, arg.Id)
	var i Post
	err := row.Scan(
		&i.Id,
		&i.AuthorID,
		&i.Content,
		&i.Created,
		&i.Updated,
		&i.IsDeleted,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, author_id, content, created, updated, is_deleted FROM post
WHERE is_deleted = false and author_id = $1
ORDER BY updated
OFFSET $2 LIMIT $3
`

type ListPostsParams struct {
	AuthorID uuid.UUID `json:"authorID"`
	Offset   int32     `json:"offset"`
	Limit    int32     `json:"limit"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts, arg.AuthorID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.Id,
			&i.AuthorID,
			&i.Content,
			&i.Created,
			&i.Updated,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
